#!/usr/bin/env python3

from collections import OrderedDict
from pathlib import Path
import argparse
import re
import sys

toksets = {}

def main(args):
	script_dir = Path(__file__).resolve().parent
	stem = Path(args.i).stem
	struct_type = "tok_entry_%s" % stem
	token_type = "uint8_t"

	with open(args.i, "r") as f:
		curr_tokset = None
		curr_tokid = 0
		for line in f.readlines():
			if line.startswith("\t"):
				primary = True
				for tokname in line.strip().split(" "):
					toksets[curr_tokset][tokname] = {'id': curr_tokid, 'primary': primary}
					primary = False
				curr_tokid += 1
			else:
				# new tokset
				curr_tokset = line.strip()
				curr_tokid = 0
				toksets[curr_tokset] = {}
	with open(args.o, "w") as f:
		f.write("// autogenerated by tok2c.py\n\n")
		f.write("#include <stdint.h>\n")
		f.write("#include <stdlib.h>\n")
		f.write("#include <string.h>\n\n")
		# generate defines
		for tokset_name, tokset in toksets.items():
			for tokset_entry_name, tokset_entry in tokset.items():
				if tokset_entry['primary']:
					f.write("#define TOK_%s_%s %d\n" % (tokset_name, tokset_entry_name, tokset_entry['id']))
			f.write("#define TOK_%s_INVALID %d\n" % (tokset_name, 255))
			f.write("\n")
		# generate struct def
		f.write("typedef struct { const char *word; %s id; } %s;\n\n" % (token_type, struct_type));
		# generate structs
		for tokset_name, tokset in toksets.items():
			tokset_struct_name = "tok_%s_%s" % (stem, tokset_name.lower())
			f.write("static const %s %s[] = {\n" % (struct_type, tokset_struct_name))
			for tokset_entry_name, tokset_entry in sorted(tokset.items()):
				f.write("\t{\"%s\", %d},\n" % (tokset_entry_name, tokset_entry['id']))
			f.write("\t{\"\", TOK_%s_INVALID}\n" % (tokset_name))
			f.write("};\n\n")
		# copy code
		with open(script_dir.joinpath("tok2c_tpl.c")) as ff:
			tpl_code = ff.read()
			tpl_code = tpl_code.replace("%STEM%", stem)
			tpl_code = tpl_code.replace("%STRUCT_TYPE%", struct_type)
			tpl_code = tpl_code.replace("%TOKEN_TYPE%", token_type)
			f.write(tpl_code)

if __name__ == '__main__':
    args_parser = argparse.ArgumentParser(
        description="Convert .tok files to .c files"
    )
    args_parser.add_argument("i", help="Input file.")
    args_parser.add_argument("o", help="Output file.")
    args = args_parser.parse_args()
    main(args)
